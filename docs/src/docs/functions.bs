[nav(1) bg(100, 220, 0, 0.06): [link("../"): &#127793;]]

[header center: [title 1: FUNCTIONS]]
[main:

# Functions
If the function can only return an error, you can use a '?' as the specified return type.

[]

## The arrow operator
The arrow operator can be thought of as a way to pass arguments into a scope and define what that scope should return (if anything). It is used to define the signature of a function.

A function must always return a value or an error in all of it's branches. If a function doesn't return anything, it will return an empty tuple.

[code:
    doNothing :: () -> {}

    -- Returns a tuple of values
    multipleReturns :: () -> (int, int, int) {
        return (1, 2, 3)
    }

    differentReturns :: (spicy : bool = false) -> (int, int, int) {
        if spicy: return (69, 420, 1337)
        
        return (1, 2, 3)
    }

    nestedReturns :: () -> bool {
        if state is (
            STATE.normal => return true
            => return false
        )
    }

    defaultReturn :: () -> (int) {
        if time.now is time.last (
            time.now += 1
        )

        return time now
    }

]

[footer: [pad(2, 0, 0, 0) center: 
    ### &#127793;
]