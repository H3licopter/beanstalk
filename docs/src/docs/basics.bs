[Navbar]
[header center: [title(1): BASIC BEANSTALK SYNTAX]]
[main:

# Style Guide
The style guide is:
- snake_case for variables, collections, styles and scenes
- Upper_Snake_Case for types and primatives
- CamelCase for functions and methods
- SCREAMING_SNAKE_CASE for constants (this is what determines a constant, not the keyword 'const')

4 spaces are recommended for indentation. 

# Comments
Comments use a double minus sign '--'. 

Multiline (block) comments use a triple minus (or more) to start and end the comment.

[code: 
-- normal comment

---
Multiline comment

Woo
---
]

# Variables
Equals means assign. Fully capitalized names become constants or read-only variables depending on their context.

Similar to Python, there is no special keyword for creating a new variable, but you can specify a type annotation.

The @ symbol before a name is used to export variables and methods/functions outside of a module or object.

## Assignment
Types will be inferred if not specified. 
Usually, you don't need to specify a type unless you are creating a new type or a collection.

### Constant
[code: 
    IMMUTABLE_VARIABLE = 69
]

### Variable with type annotation
[code: 
    float_var Float = 0.0
]

## Static Assignment
[code:
    -- UTF-16 string with type annotation
    my_brain String = "Dumb"

    -- 64 bit float with inferred type
    number = 69.420

    -- Copies the number
    another_number = number

    -- Type error
    number = "Not a number"
]

Variables must be given a value or a type when they are declared.
There is no such thing as 'null' in Beanstalk, the closest equivalent is an Error type or an empty tuple.

If an error occurs during assignment of a variable, it's type becomes an Error and must be handled. 
Unhandled assignment errors at runtime will default the variable to it's zero value.

All copies of collections are explicit and must use the 'copy' keyword in place of a type.

[code:
    -- Create a new collection of integers
    a_collection {Int} = {1, 2, 3, 4, 5}
    
    -- Deep copy of a collection
    a_copy = copy a_collection

    -- Reference to a_collection
    a_reference = a_collection

    -- Shadow a_collection with a new value
    a_collection {Float} = {23.0, 43.1}

    -- a_reference is still a reference to the original collection
    a_reference add(5)
    print(a_reference) -- {1, 2, 3, 4, 5, 5}

    a_collection remove(a_collection length - 1)
    print(a_collection) -- {23.0}
]

If you are creating a non-collection variable and need it to be formatted over multiple lines, 
you can surround it in parenthesis.

This creates a tuple of one item, which is equivalent to the value inside the parenthesis.

[code:
    some_int = (
        4 + 5 + 6 + 7 + 8 + 9 + 10
    )
]

# Data Types
All data type keywords contain methods from the standard library for common manipulation of types. 
The zero value is the value a variable will be assigned if it is not assigned a value when being initialized.

## Numerical Types
There is an intention to support all of these number types in the future. **Currently only 64 bit floats are supported.**

[table(3): 
    [: Type] [: Description] [: Zero Value]

    [: float ] [: 64 bit floating point number on 64 bit systems, 32 bit on 32 bit systems ] [: 0.0]

    [: int ] [:  64 bit signed integer on 64 bit systems, 32 bit on 32 bit systems ] [: 0]

    [: idx ] [: pointer sized unsigned integer ] [: 0]

    [: unit] [: *NOT YET SUPPORTED* Special numeric unit syntax for appending numerical types. The underlaying primative will be the same, but automatic conversions will be applied to the result. ] [: error]
]

## String based Types
Beanstalk uses UTF-16 strings by default to keep all string manipulations inside JS. 
The speed penalty of passing strings in and out of Wasm is currently not worth the extra complexity, 
so all string expressions will compile to JS rather than Wasm.

Eventually this will be entirely manipulated in Wasm, allowing for different string types and faster string operations. For now, JS is fast enough.

[table(3): 
    [: Type] [: Description] [: Zero Value]

    [: string ] [: UTF-16 (For JS compatibility)] [: ""]

    [: error] [: Contains a special type of debug string detailing the error] [: "ERROR"]

    [: path] [: *NOT YET SUPPORTED* Path to a file, must be specified as the type of the string. Will handle OS specific paths. ] [: ""]
]

## Collection Types
[table(3):
    [: Type ] [: Description] [: Zero Value]

    [: Tuple ] [: Any number of immutable items seperated by commas. See [link "./collections": Collections] for more information.] [: ()]

    [: Collection ] [: A blend between arrays and structs. See [link "./collections": Collections] for more information.] [: {}]
    
    [: choice ] [: Rust style enums. To be implemented. ] [: error]

    [: type ] [: For generics and datatype related operations] [: error]
]

## Scene Types
[table(3):
    [: Type ] [: Description] [: Zero Value]

    [: scene ] [: The templating syntax of Beanstalk. See [link "./scenes": Scenes for more info!]] [: "`[]`" -  an empty scene]
]

# Strings
String is the keyword for string types in Beanstalk. Double quotes are automatically strings. 

[code: "Double quotes for a UTF-16 string literal"]

Backticks are used for RAW strings. To escape a backtick it must be preceded with a backslash \.

[code: "string literal with \{curly braces} in it that are escaped"]

[code: 
    `9 "is" {5 + 4}`
    -- result is "9 "is" 9"
]

# Logical Operators
The 'is' keyword is used to check equality. Not ==. The "and / or" keywords are used for logical and / or and 'not' is used to invert a truthy value to falsy or vice versa.

[table(3):
    [: Operator] [: Description]          [: Precedence]
    [: `^`]        [: Exponents]            [: 4]
    [: `//`]       [: Roots]                [: 4]
    [: `*`]        [: Multiplication]       [: 3]
    [: `/`]        [: Division]             [: 3]
    [: %]          [: Modulo (truncated)]   [: 3]
    [: %%]         [: Remainder (floored)]  [: 3]
    [: +]          [: Sum]                  [: 2]
    [: `-`]        [: Subtraction]          [: 2]
]

# Numeric Units
[red: In development]

Values can be appended with special unit types. These can represent a real world unit and will inform how operations with other units will work. 

The first unit in the operation will be used if no unit type is specified in the type parameter. 
You don't need to have a space between a literal value and the unit type, but variables must have a space between the value and the unit type.

If you are mixing unit types in an operation, the first unit type will be used for the result.

[code:
    -- Specifies the base type as a float
    m unit : float
    cm unit : m * 0.01
    mm unit : cm * 0.1

    width = 5m * 230cm
    -- result is 5.23

    height = (3m * 2m)cm
    -- result is 500
]

]

[Footer]
