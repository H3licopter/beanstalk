[Navbar]

[header center: [title(1): FUNCTIONS]]
[main:
If the function can only return an error, you can use a '?' as the specified return type.

Arguments are passed by reference by default, but can be passed by value using the 'copy' keyword.

## The arrow operator
The arrow operator is used to define the signature of a function. 
Functions must always have a return type specified, even if it is an error.

[code:
    -- Returns an int
    multipleReturns fn(x Int) -> Int: return 1 + x

    -- Returns a struct
    returnStruct fn(x Int) -> SomeStruct:
        return SomeStruct{1, 2}
    end

    differentReturns fn(spicy bool = false) -> (Int, Int, Int):
        if spicy: return (69, 420, 1337)
        
        return (1, 2, 3)
    end

    canError fn(x String) -> String?: 
        return fetch(x) ? error(msg)
    end

    -- Anonymous function
    fn(x Int) -> Int: return x + 1

    -- Shorthand for anonymous function that just returns a single inline expression
    fn() -> "Hello, World!"

    -- Calling a function
    multipleReturns(5)

    -- Calling a function with named arguments
    differentReturns(spicy: true)
]

[Footer]