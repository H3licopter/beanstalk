[Navbar]

[header center: [title 1: ROADMAP FOR BEANSTALK]]

[main:
Beanstalk is a new language and is still in development. It doesn't even have a version number yet!

Here is a list of current bugs, development goals and planned features.

## Current immediate task list
- Finish implementing all math operators and brackets
- get variables and mostly folded expressions working fully in WASM
- Markdown Parsing working correctly

## Core Features Being Implemented
- Finish implementing Style system for scenes (separate from core language into library of keywords)
- Tidy up Error reporting
- Boolean expressions and operators
- If statements
- Loops
- Importing/exporting working fully
- Functions and function calls working fully, including inside expressions
- Scene reactivity and full component system
- Importing HTML, CSS and JS libraries seemlessly into a BS project
- Scoping and variable shadowing
- Commit to final memory management strategy for the language
- Compiler as a proper command line tool

## Current Bugs
*Scenes*
- Emphasis and strong tags are not being parsed correctly for bullet points. Markdown parser needs some work.
- Scenes sometimes not nesting correctly and escaping it's parent scene.

## Future Design Plans and proposals
- Better Dev server with web sockets handling hot reloading (rather than the current janky system)
- Server files and server side BS code (Using a Wasm runtime on the server)

### Reserved keywords for standard lib functions
Beanstalk should be a very batteries included language, with a lot of standard library functions.
The standard library will be the only default import option in the project config file.

print|import|rng|log|round|abs|sin|cos|tan|expo|gcd

### Concurrency (channels/threads) syntax
Like go, but hopefully simpler and clearer control flow. 

Uses >> and << to specify send / recieve channels. No "chan" keyword.

[code:
    -- Create a channel
    channel <<int>>

    -- Send a value to the channel (notice value on the left, not right)
    -- Channel operator can't be used in the middle of an expression, must be right at the end
    5 >> channel

    -- Recieve a value from the channel
    x = << channel

    -- Close the channel
    channel close()
]

[Footer]