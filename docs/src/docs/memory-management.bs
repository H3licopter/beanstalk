[Navbar]

[header center: [title 1: MEMORY MANAGEMENT]]
[main:

[red: Memory management scheme still in testing / design phase ]

# How Beanstalk handles memory
Beanstalk will analyze where variables are used and passed around to determine whether they are copied, moved or passed by reference.
This will be a bit like Rust, but less explicit and easier to understand. 

The cost of this is more work for the compiler, and a higher chance of less optimal code being generated.

The intention is for the language to **not** have a garbage collector.

Failing this plan, either a model similar to [link "https://verdagon.dev/blog/linear-types-borrowing": Vale's Linear Types and Generational References] will be used.

Or just a GC with first class support for memory arenas if none of these ideas work out.

## Copying
To copy a variable, you can use the copy keyword. This will create a new variable with the same value as the original.

[code:

    testing_memory () -> () :
        Coords : {
            x = 5
            y = 3
        }

        -- VARIABLE BRANCHING
        -- Coords is now branched into two possible places
        -- The compiler will collapse the branch depending on the use of either variable
        Coords2 = Coords

        -- A mutable reference to the original Coords is given to change_var
        change_var(Coords)

        -- Compiler now has to determine how to handle the double reference
        change_2_vars(Coords, Coords2)

        -- Branches are collapsed to one variable and ownership is passed to change_var
        change_var(Coords2)
    end

    -- References
    testing_memory_2 () -> () :
        Coords : {
            x = 5,
            y = 3,
        }

        coord_collection {Coords} = {
            Coords {x = 1, y = 3}, 
            Coords {x = 2, y = 4},
            Coords {x = 3, y = 5},
        }

        -- mutable reference given to function
        change_var(var1)

        -- Giving var1 to var2
        var2 = var1

        -- var1 ownership is given to function
        change_var(var1)
    end


    -- References
    testing_memory_3 : () -> () :
        var1 = {
            x = 5
            y = 3
        }

        -- Mutable Reference to var given to function
        change_var(~var1)

        -- Ownership given back to var1

        -- Giving var1 to var2 and var3
        var2 = ~var1
        var3 = ~var1

        -- Error, var2 was given to var3
        var2 = {4, 5}

        -- 
        change_var(~var1)
    end

    change_var (~var : float) -> () :
        var x = 3
    end

    change_var_again (~var : float) -> () :
        change_var(var)
    end
]

