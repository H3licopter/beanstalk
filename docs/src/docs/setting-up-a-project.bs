[navbar]

[header center: [title 1: PROJECT SETUP]]
[main:
# Setting up a Project
Running the command 'new html' followed by your directory path will create a new static HTML Beanstalk project in that directory. The path is relative to the current directory.

*More project types will be added in the future.*

The entry point for a Beanstalk project is configured when creating a new Beanstalk project. 

This file is called **config.bs** and is placed in the root folder of your project by default. A configuration file is also created in the root directory.

*All Beanstalk files use the .bs file extension.*

The compiler will read through any configuration settings first.

- src folder contains your bs files and determines the file structure of your pages. 
- dist folder contains the compiled files.

⚠️ [red size(0.85):  The compiler is not yet a proper command line tool, it currently has to be compiled and ran directly before giving it a command.] ⚠️

Has development starts to be more stable, the compiler will be set up to install on your system and be run from the command line with the 'bean' command.

# Routes
Beanstalk projects use a directory based router, with a few special naming rules. 

## Comptime files
Prefixing your BS files with a '#' symbol and keyword means it is a special comptime file. The compiler recognises different kinds of comptime files and will handle them differently. 

After the special file name, you can leave a space and name the file whatever you want.

- '#page' is the main page of the folder it is in.
- '#layout' automatically wraps all pages in the same directory in a parent layout. Use the 'slot' keyword in a scenehead to specify where the content should be placed. 
- '#error' handles what the server does by default when an error occurs on the server, such as a 404.

## Server files (coming soon)
Prefixing your BS files with a '+' symbol and keyword means it is a server file. Naming the file the same as a regular page, beans the server file will be called first when the page is requested.

Otherwise the server file can contain regular server side BS code.

[red size(0.85): BS cannot yet be used for server side code]

# Compiling your BS files
### Build
The simpliest way to get the compiler to output some HTML is to use the *build* command.

While in the root directory of your project, where the config.bs file is, run the command **build** to compile your whole project.

[code:
    $ build ./path_to_project
]

If you specify a specific bs file, build will only compile that specific file.

[code:
    $ build ./path_to_project/src/index.bs
]

### Dev
To create a development server with a watcher, run the command 'dev' in the root directory of your project. This is the main way to develop your HTML project.

This will create a localhost server that will automatically reload the page when you make changes to your bs files. The command line will give you a link to open in your browser.

# File Paths
Any index.bs files will become the main page of the folder they are in, so your main page will be index.bs in the root directory.

*** ⚠️ The intention is to have a file-system based router built in [link "https://kit.svelte.dev/docs/routing": (similar to Svelte)] so there may be changed in file naming conventions and how the compiler handles those files in the future. ⚠️ ***

]

[footer: [pad(2, 0, 0, 0) center: 
    ### &#127793;
]
