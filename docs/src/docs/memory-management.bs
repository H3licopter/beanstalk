[Navbar]

[header center: [title 1: MEMORY MANAGEMENT]]
[main:

[red: Memory management scheme still in testing / design phase ]

# How Beanstalk handles memory
The intention is for the language to **not** have a garbage collector, but to use a system similar to Rust's ownership model but trade a bit more speed for abstraction and simplicity and have first class language support for memory arenas/regions.

The memory management model is heavily inspired by [link "https://verdagon.dev/blog/linear-types-borrowing": Vale's Linear Types and Generational References].

## Ownership
Variables are cleaned up when they go out of scope, and are not allowed to be used after they are cleaned up. This is to prevent dangling pointers and memory leaks.

Instead of having to explicitly denote references (e.g using & in rust), all variables automatically become immutable references by default when used.

## Borrowing
To lend a mutable version of a variable, you can use the ~ tilde operator. 

Beanstalk will automatically determine whether it should pass a mutable reference or full ownership of a variable to a function, based on how the variable is used in the rest of the function.

Only one mutable reference to a variable can exist at a time, and it is not allowed to be used after it is lent out.

## Copying
To copy a variable, you can use the copy keyword. This will create a new variable with the same value as the original.

[code:

    testing_memory () -> () :
        var = {
            x := 5
            y := 3
        }

        -- Copy of var
        var2 = copy var

        -- Ownership given to function
        change_var(var)

        -- Error, var was dropped after being given to change_var
        change_var(var)
    end

    -- References
    testing_memory_2 () -> () :
        var1 = {
            x = 5
            y = 3
        }

        -- Var1 ownership given to function, but function gives it back at the end of it's scope
        change_var(~var1)

        -- Giving var1 to var2
        var2 = var1

        -- var1 ownership is given to function
        change_var(var1)
    end


    -- References
    testing_memory_3 : () -> () :
        var1 = {
            x = 5
            y = 3
        }

        -- Mutable Reference to var given to function
        change_var(~var1)

        -- Ownership given back to var1

        -- Giving var1 to var2 and var3
        var2 = ~var1
        var3 = ~var1

        -- Error, var2 was given to var3
        var2 = {4, 5}

        -- 
        change_var(~var1)
    end

    change_var (~var : float) -> () :
        var x = 3
    end

    change_var_again (~var : float) -> () :
        change_var(var)
    end
]

