#title "Errors"
#date "2024-2-5"
---
# Error Handling
Any function that can return an error will return an Option type. This type can be checked for an error and handled / unpacked accordingly using the ! or ? operator.

Both the ! and ? can append any statement or expression. 

## The '!' operator
The ! operator will unpack the Option type and handle the error or pass the error up the call stack if one is present. 

## The '?' operator
The ? operator will unpack the Option type and create a new scope to handle the value if there was no error. It is also used to define an option type by appending a type with it. 

This is useful if you want to only run a block of code if there was no error without having to nest the code inside an if statement.

Option type examples: int? string? bool?

## The '!?' operator
The !? operator is an assert that will force the program to panic and halt if the previous condition is false or an error. This is useful for debugging and ensuring that the program will not continue if a critical condition is not met.

## The '!!' Operator
Double bang !! will force the program to panic and halt if the previous expression or function call returned an error as one of it's options.

## Using the ! and ? operators
These operators allow for very concise error handling and makes it easy to see where errors are being handled in the code, as well as providing a way to avoid opening a new scope for every error check.

`
    -- Always returns a string even if an error is thrown by getNetworkRequest()
    -- The program will print the error and continue with "example.com" as the value instead of the zero value and an error.
    getURL : -> string {
        return getNetworkRequest() ! {
            io "Network Request Error: {error}"
            return "example.com"
        }
    }

    -- 
    Returns an error to the calling function, just printing out information about the error without returning a value to replace the empty string.
    
    A question mark must be added to the return type of the function to specify that it can return an error. This enforces that the error must be handled by the calling function.
    --
    
    getURL : -> string? {
        return getNetworkRequest() ! {
            io "Network Request Error: {error}"
        }
    }

    -- This function also specifies it can return an error so no explicit error handling is needed inside
    dodgyFunction : -> string? {
        return getURL()
    }

    -- The compiler will give a warning about unhandled error cases inside this function
    callingFunction : -> () {
        thing := dodgyFunction()
    }

    -- So it must be handled like this
    callingFunction : -> () {
        thing = dodgyFunction ! return "default_thing"
    }
`
