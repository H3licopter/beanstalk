#title "Variables and Datatypes"
#date "2024-2-4"
---
# Variables
Beanstalk uses a name, value, type syntax for variable assignment. 
This is to make the code readable, concise and allows for a unique unit type syntax. 
It also means Beanstalk values are written like values with units you would see in a physics equation, 
with the value being appended by it's unit.

## Assignment
When creating a new variable, there are several different declarations to be aware of. 
The @ export symbol indicates that a variable is exported (public), and can be accessed outside of the module or scene. 
Once a variable has been initialised as exported, it does not need to have the export symbol added to it again.

The # hash symbol is used to access properties and methods from the window or page you are creating. 
You use this to access properties on the Window object in the browser.

Assigning a value to a variable using the big arrow => operator will create a signal,
which means it will reactively update inside of scenes when it is mutated.

### Private mutable Variable
mutable_var = 0

### Exported mutable Variable
@mutable_var = 0

### Immutable Variable
immutable_var : 0

### Exported immutable Variable
@immutable_var : 0

### Compile time mutable variable
comptime_var := 0

### Compile time immutable variable
comptime_immutable_var :: 0

### Signal
signal_variable => 0

### Exported signal
@signal_variable = 0

# Static Assignment
`
    -- UTF-8 string
    my_brain = "Dumb"

    -- 32 bit integer
    integer = 69

    -- 32 bit float
    float = 69.0

    -- Specify the type as an unsigned 32 bit integer by appending the type unit to the value
    my_brain = 420 uint

    -- Variable initialised with it's zero value
    uselessness : int
`

**There is no such thing as Nil, Null or None in Beanstalk.**

Variables must be given a value or a type when they are declared.

If an error occurs during assignment of a variable, 
an option type is created and must be handled during the assignement or passed up the callstack.

`
    uselessness = int 
    -- value is 0

    -- Immutable copy
    thing : a_collection 

    -- Referecnce to a_collection
    thing = a_collection

    -- deep copy of a collection
    thing = a_collection.copy() 

    number_copy = number
`

# Immutable Variables
`
    -- Int constant (type inferred as int)
    self_worth : 0

    -- Float constant
    my_iq : 0.0

    best_number : 69 float

    -- Int constant evaluated at compile time
    -- Will throw an error at compile time (int overflow) as the value is too big
    weird_num :: 69 ** 420
`

If you are creating a non-collection variable and need it to be formatted over multiple lines, 
you must wrap the value in parenthesis. 

`
    var1, var2, var3, var4 : (
        4 + 5 + 6 + 7 + 8 + 9 + 10
    ) int

    -- Assigning multiple variables at once

    var1, var2 : 420

    var3, var4 = "cool", "beans"

    -- Concatinating a bunch of strings into one variable
    -- Strings with no spaces between them will be concatenated automatically
    var5 = "cool " "beans " "are " "cool"
`

# Data Types
All data type keywords contain methods from the standard library for common manipulation of types. 
The zero value is the value a variable will be assigned if it is not assigned a value when being initialized.

## Primative Types
[table 3: 
    [: Type] [: Description] [: Zero Value]

    [: int] [: 32 bit signed integer ] [: 0]
    
    [: idx ] [: Pointer sized unsigned integers. If this value can be inffered at compile time by the compiler, it becomes unsigned 32 bit integer when used for a varaible. ] [: 0]

    [: flt] [: 32 bit floating point number ] [: 0.0]

    [: dec] [: A fixed point number to a specified number of decimal places, you can also specify the offset of the decimal point to define your precision] [: 0.00]

    [: str] [: UTF-8] [: ""]

    [: uni] [: Unicode strings are UTF-32 strings. They are created using single quotes. ] [: '']

    [: bool] [: Boolean, including true and false as types] [: false]
]

## Collection Types
[table 3:
    [: Type] [: Description] [: Zero Value]

    [: ()] [: Tuple] [: () nil]
    
    [: {}] [: Collection] [: {} Empty Collection]

    [: scene] [: The templating syntax of Beanstalk] [: [] an empty scene]
    
    [: choice] [: Rust style enums] [: error]

    [: type] [: For generics and datatype related operations] [: error]

    [: error] [: Contains a string detailing the error] [: ]
]

## Generic Types
Generics are used to create a type that can be used with multiple types. 
Beanstalk has a few built in generic types that can be accessed as properties on the type keyword.

[table 3:
    [: Type] [: Description] [: Zero Value]

    [: type.number] [: A tagged union of integers, floats and decimals] [: 0]

    [: type.string] [: A tagged union of strings and unicode strings] [: ""]

    [: type.collection] [: A tagged union of collections of any type] [: ()]

    [: type.function] [: Any function as a value ] [: {}]
]

See [link "../functions#Generic_Functions": Function generics] for more information.

# Strings
String is the keyword for string types in Beanstalk. Double quotes are automatically UTF8 strings. 

"Double quotes for a utf8 string literal"

Curly braces are used to add expressions into the string. 

`
    "9 is {5 + 4}" -- 9 is 9
`

Backticks are used for RAW strings. To escape a backtick it must be preceded with a backslash \.

"string literal with \{curly braces} in it that is escaped" 

`
    `9 "is" {5 + 4}` -- 9 "is" {5 + 4}
`

# Unicode Strings
Single quotes are used to create UTF-32 strings. This is useful for emoji and other special characters that are not in the UTF-8 character set. 

cool_emoji : 'ðŸ˜‚'

# Unit Types
Values can be appended with special unit types. These can represent a real world unit and will inform how operations with other units will work. 

These are extensions to exsisting base types.

The first unit in the operation will be used if no unit type is specified in the type parameter. 
You don't need to have a space between a literal value and the unit type, but variables must have a space between the value and the unit type.

If you are mixing unit types in an operation, the first unit type will be used for the result.

`
    #unit m = float -- Specifies the base type as a float
    #unit cm = m * 0.01
    #unit mm = cm * 0.1

    width = 5m * 230cm
    -- result is 5.23

    height = (3m * 2m) cm
    -- result is 500
`

You can also create boolean unit types that allow for strict type checking. 

`
    #unit Age_Range = 0 to 120

    person_age = age_input.value Age_Range !(
        print("Invalid age input: {error}")
    )
`

# References
References are used to create a reference to a variable.

# Comptime
For functions and variables that will only exsist during compile time, you can use the double colon '::' or colon equals ':=' operator. 
This allows you to create variables and functions that will only run at compile time. 
Any comptime function calls that return values will be replaced with the value they return at compile time.

createRandomString :: -> string {
    return "a string"
}

random_string = createRandomString() -- random_string will just be "a string" at runtime.

# Signals
Signals are built in attributes in Beanstalk and allow for reactivity inside scenes.

To turn any variable into a signal, you add a $ to the front of the variable name. 

`
    my_signal => 0

`