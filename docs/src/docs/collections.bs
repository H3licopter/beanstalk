[:

# Collections
All Collections are reference types in Beanstalk, which means they are references to underlying data. They work a little bit like tables in Lua.

Single expression or value wrapped in parenthesis is just evaluated as the expression or value itself and does not automatically become a collection.

## Tuples
By simply listing literals separated by commas, and not specifying a type, you create a tuple literal.

You can surround the tuple with parenthesis for clarity and multiline.

`
1, 2, 3

(
    1,
    2,
    3,
)

`

Tuples are a fixed size and can contain any type. Tuples have implicit behaviours that allow for easy unpacking, comparison and assignment.

If a tuple only contains one value, it becomes equaivalent to a single value rather than a collection of values.

When creating a tuple using a colon, the values inside become immutable.

`
    -- Fixed size tuple of immutable integers
    tuple :: 1, 2, 3
    tuple.0 -- returns 1
`
## Dynamic Collections (Arrays)
When creating a variable collection rather than a constant collection, it becomes a mutable collection.

Dynamic collections can only contain one data type. 
`
    array := {3, 4, 5}
    array.push 9 -- error

    array.0 += 1 
    array.0 -- returns 4
`

Specifying the type and size of your collection. By adding a number before the type, you create a fixed size collection.
`
    -- Empty dynamically sized int array
    empty_array : {10 int}

    empty_array.push 3
    empty_array.0 -- returns 3

    -- dynamically sized immutable string array
    strings : {string} : {"hello", "world"}

`
