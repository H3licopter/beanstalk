[:

# Style Guide
The style guide is:
- snake_case as the default choice for variables and other things
- camelCase for functions
- PascalCase for objects
- SCREAMING_SNAKE_CASE for Choices

4 spaces are recommended for indentation. 

# Comments
Comments use a double minus sign '--'. 

If you put a newline immediately after a comment mark, the comment will become multi line and must be closed with - again. 
Comments are read by the compiler and can be nested.

[code: 
    -- normal comment

    --
    Multiline comment

    Woo
    --
]

# Variables
Beanstalk uses pointer semantics by default. This means that a variable is a reference to a value unless it is explicitly copied or assigned to a new value.

Colon means initialise, equals means assign. The type of a variable goes after the colon, but can be omitted if the type is inferred.

The @ symbol is used to export variables and methods/functions outside of a module or object.

## Exporting / Importing at the top of a module
This will export existing variables and functions from the module. The variables and functions being exported must be declared somewhere inside the module.

[code:
    @export (
        mutable_var, 
        comptime_immutable_var
    )
    @import (
        utiliFunction
    )
]

## Assignment
Assigning a new variable to an existing variable will create a reference to the existing variable, unless you specify the type as a 'copy'.

Types will be inferred if not specified, and implicit conversions will be used to convert the value to the inferred type.

### Compile time immutable variable
[code: comptime_immutable_var : int : 69]

### Runtime Variable
[code: mutable_var : int = 0]

## Static Assignment
[code:
    -- UTF-8 string
    my_brain := "Dumb"

    -- 32 bit integer
    integer :: 69

    -- 32 bit float
    float := 69.420

    -- pointed sized unsigned integer
    my_brain : index : 420 

    -- Implicit string conversion (string type must be specified in the type definition for this to work)
    -- Any expression you assign to this string variable will be converted to a string
    cool_string := 14 + 42 + " is a cool number " + 'ðŸ˜‚' -- "56 is a cool number ðŸ˜‚"
]

Variables must be given a value or a type when they are declared. There is no such thing as 'null' in Beanstalk, the closest equivalent is an Error type or an empty tuple.

If an error occurs during assignment of a variable, it's type becomes an Error type and must be handled. Unhandled assignment errors at runtime will default the variable to it's zero value.

All copies of collections are explicit and must use the 'copy' keyword in place of a type.

[code:
    -- Deep copy of a collection
    thing : copy = a_collection 

    -- Reference to a_collection
    thing := a_collection
]

If you are creating a non-collection variable and need it to be formatted over multiple lines, 
you must wrap the value in parenthesis.

Parenthesis are used to group expressions together.

[code:
    some_int := (
        4 + 5 + 6 + 7 + 8 + 9 + 10
    )
]

# Data Types
All data type keywords contain methods from the standard library for common manipulation of types. 
The zero value is the value a variable will be assigned if it is not assigned a value when being initialized.

## Primative Types
[table 3: 
    [: Type] [: Description] [: Zero Value]

    [: int ] [: 32 bit signed integer ] [: 0]
    
    [: index ] [: Pointer sized unsigned integers. If this value can be inffered at compile time by the compiler, it becomes unsigned 32 bit integer when used for a varaible. ] [: 0]

    [: float ] [: 32 bit floating point number ] [: 0.0]
    
    [: decimal ] [: A fixed point number to a specified number of decimal places, you can also specify the offset of the decimal point to define your precision] [: 0.00]

    [: string ] [: UTF-8] [: ""]

    [: unicode ] [: Unicode strings are UTF-32 strings. They are created using single quotes. ] [: '']

    [: bool ] [: Boolean, including true and false as types] [: false]

    [: error] [: Contains a special type of debug string detailing the error] [: "ERROR"]
]

## Collection Types
[table 3:
    [: Type] [: Description] [: Zero Value]

    [: ()] [: Collection. Any number of items seperated by commas. See [link "../collections": Collections] for more information.] [: ()]

    [: scene] [: The templating syntax of Beanstalk] [: "`[]`" -  an empty scene]
    
    [: choice] [: Rust style enums] [: error]

    [: type] [: For generics and datatype related operations] [: error]
]

# Strings
String is the keyword for string types in Beanstalk. Double quotes are automatically UTF8 strings. 

[code: "Double quotes for a utf8 string literal"]

Backticks are used for RAW strings. To escape a backtick it must be preceded with a backslash \.

[code: "string literal with \{curly braces} in it that is escaped"]

[code: `9 "is" {5 + 4}` -- 9 "is" {5 + 4}]

# Unicode Strings
Single quotes are used to create UTF-32 strings. This is useful for emoji and other special characters that are not in the UTF-8 character set. 

[code: cool_emoji : 'ðŸ˜‚']

# Logical Operators
The 'is' keyword is used to check equality. Not ==. The "and / or" keywords are used for logical and / or and 'not' is used to invert a truthy value to falsy or vice versa.

Only false, ! and ? are falsy values. Any other check with an if statement will return true. 

[table 3:
    [: Operator] [: Description]          [: Precedence]
    [: **]       [: Exponents]            [: 8]
    [: //]       [: Roots]                [: 8]
    [: *]        [: Multiplication]       [: 7]
    [: /]        [: Division]             [: 7]
    [: %]        [: Modulo (truncated)]   [: 7]
    [: %%]       [: Remainder (floored)]  [: 7]
    [: +]        [: Sum]                  [: 6]
    [: -]        [: Subtraction]          [: 6]
]

# Numeric Units
Values can be appended with special unit types. These can represent a real world unit and will inform how operations with other units will work. 

The first unit in the operation will be used if no unit type is specified in the type parameter. 
You don't need to have a space between a literal value and the unit type, but variables must have a space between the value and the unit type.

If you are mixing unit types in an operation, the first unit type will be used for the result.

[code:
    -- Specifies the base type as a float
    m : unit : float
    cm : unit : m * 0.01
    mm : unit : cm * 0.1

    width := 5m * 230cm
    -- result is 5.23

    height := (3m * 2m)cm
    -- result is 500
]