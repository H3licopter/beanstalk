[Navbar]
[header center: [title(1): TYPES AND TUPLES]]
[main:

# Tuples and Types
## Tuples
Tuples are a way to group multiple values together. 
They are created by using parentheses and separating the values with commas.

The unique thing about tuples in Beanstalk is that they can have named values,
and it creates a new type for that tuple, replacing the need for structs in many cases.

Another unique property of tuples in Beanstalk is that a tuple of one item is the same as the item itself.

[code:
    -- Creating a new instance of the tuple
    -- You can pass the arguments the same as functions, either in order or named
    -- Coords now becomes a new type with the properties x, y and z
    enemy_vec Coords = (
        x: 1,
        y: 2,
        z: 3,
    )

    enemy_vec.x -- returns 1

    single_item = (item: 1)
    integer = 1

    single_item is integer -- returns true
]

## Types
Types are a way to define the equivalent of classes in Beanstalk.

Creating a new type in Beanstalk is done by using the 'type' keyword.
The rest of the declaration is very similar to creating a function, 
but instead of return types, you specify the properties of the type.

[code:

    -- The equivalent of a class is creating a new type that returns a list of properties
    -- Any methods inside the construct are automatically exported
    -- The return types are the properties of the construct being declared (the 'this' or 'self' keyword is not needed)
    -- These properties can also be assigned default values
    Player type(name String, age Int, level Int = 1) ->
        name String,
        id Int = 0,
        age Int, 
        health Int = 100,
        level Int,
        dead Bool = false,
    :
        health += level * 10

        -- This method is automatically exported
        damage fn(amount Int) -> ():
            health -= amount
            if health <= 0: dead = true
        end
    end

    -- Creating a new instance of the type
    player = Player("Bob", 20)

]
]

[Footer]