#title "Collections"
#date "2024-2-5"
---
# Collections
All Collections are refernece types in Beanstalk, which means they are references to underlying data. There are three main types of collection, tuples, prototypes and arrays.

Single expression or value wrapped in parenthesis is just evaluated as the expression or value itself and does not automatically become a collection.

All collections can have their data accessed using the dot operator, either by index or by name if they are named values.

## Literals
By simply wrapping a list of values in parethesis and not specifying a type, you create a tuple literal.

`
(1, 2, 3)
`

## Fixed Collections
Tuples are a fixed size and can contain any type. Tuples have implicit behaviours that allow for easy unpacking, comparison and assignment.

If a tuple only contains one value in parenthesis, it becomes equaivalent to a single value rather than a collection of values.

Tuples can also contain named values that can be accessed by name rather than index. This is done by providing a variable name just before the value.

When creating a tuple using a colon, the values inside become immutable.

`
    -- Fixed size collection of immutable integers
    tuple : (1, 2, 3)
    tuple.0 -- returns 1

    -- Named tuple element (mutable)
    tuple_of_one = (number 69)
    int_value = 69
    tuple_of_one is int_value -- returns true

    -- Named value with type (mutable)
    tuple_of_one = (number 420 float)
    float_value = 420.0
    tuple_of_one is int_value -- returns true
`
## Dynamic Collections (Arrays)
Values wrapping in curly braces become and assigning using an equals, you can create a dynamic collection.

Dynamic collections can only contain one data type.
`
    array = {3, 4, 5}
    array.0 -- returns 3
`

Specifying the type of the collection is optional for arrays, but if your collection is empty or only contains one value, you must specify the type as a collection of that type.

Empty parentheses are how you specify a collection type.

`
    -- Empty array of integers
    empty_array = {}int

    empty_array.push(3)
    empty_array.0 -- returns 3
`

An empty, dynamically sized collection of strings.

`
    strings = {}string
    strings.push("Hello")
    strings.push("World")
    strings.0 -- returns "Hello"
`

Dynamic collections can also have named values.

`
    values = {
        default_number 0,
        6, 
        7,
        8
    }
`

## Prototypes (Structs)
By creating a collection using a colon, you create a prototype, which is a fixed collection of named properties or methods. 

`
    -- Prototype for a vector
    -- Has an optional Z property with a default value of 0
    -- Each new instance of this prototype will have a value for z
    Vec : {
        x float,
        y float,
        z = 0.0
    }

    Vec.x -- returns 0

    -- Creating a method for the prototype
    reset : this Vec -> {
        this.x = 0
        this.y = 0
        this.z = 0
    }
`

## Creating a new collection from a prototype
If you specify the type as a prototype, you can create a new collection that makes sure the values are the same structure as the prototype.

`
    coordinates = {
        x 3.45,
        y 7.93,
    } Vec

    coordinates.x -- returns 3.45
    coordinates.z -- returns 0.0
    coordinates.reset() -- sets all values to 0.0
`