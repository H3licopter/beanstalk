#title "Collections"
#date "2024-2-5"
---
# Collections
Collections of data in Beanstalk are created using curly brackets. The type of the collection is inferred from the assignment, but can be specified by appending the type after the collection declaration. All collections have their data accessed using the dot operator.

## Collection Prototype
- Properties cannot be changed or added, as prototypes are compile time evaluated. Becomes a prototype with default values for new structs.
- Values assigned to a prototype become the zero value of that property if it isn't assigned. 
- Setting properties as constants means that when the properties are set on new struct using the prototype, they are also constants. 
- If you don't set an explicit zero value on a property, any new structs created with the prototype MUST assign a value to it.

`
    Vec : {
        x float,
        y float,
    }
`

Here is the same prototype, but with optional parameters that have default zero values.

`
    Vec : {
        x = 0.0,
        y = 0.0,
    }
`

### Adding a method to the prototype
`
    reset : this Vec -> (
        this.x, this.y = 0
    )
`

### Default values from Prototype
If Vec did not assign zero values for the properties, this would throw an error as values for x and y would have to be provided.

emptyVec : Vec

## Creating a new struct from a prototype
`
    coordinates = {
        x = 3.45,
        y = 7.93
    } Vec

    coordinates.x -- returns 3.45
    coordinates.reset{} -- sets x and y to 0
`

Collections created without named properties become arrays. All collections must contain the same datatype.

- Mutable collections are dynamically sized
`array = { 3, 4, 5 }`

`
    -- Creates an empty collection that can only contain integers
    integers = {int}

    fears = { "Javascript", "C++", "Cobol" }
    fears.0 -- returns â€˜Javascript'
`